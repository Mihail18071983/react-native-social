'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.revert = exports.inject = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _es6Template = require('es6-template');

var _es6Template2 = _interopRequireDefault(_es6Template);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tmplPath = (0, _path.join)(__dirname, 'injectDevToolsMiddleware.tmpl.js');
var tmplPathInDev = (0, _path.join)(__dirname, '../lib/injectDevToolsMiddleware.tmpl.js');

var template = _fs2.default.readFileSync(_fs2.default.existsSync(tmplPath) ? tmplPath : tmplPathInDev, 'utf-8');

var name = 'react-native-debugger-patch';
var startFlag = `/* ${name} start */`;
var endFlag = `/* ${name} end */`;

var rnFlags = {
  '0.50.0-rc.0': {
    target: 'react-native',
    dir: 'local-cli/server/middleware',
    file: 'getDevToolsMiddleware.js',
    keyFunc: 'launchChromeDevTools',
    func: "function launchChromeDevTools(port, args = '') {",
    replaceFunc: "function launchChromeDevTools(port, args = '', skipRNDebugger) {",
    funcCall: '(port, args, true)',
    args: "'localhost&port=' + port + '&args=' + args"
  },
  '0.53.0': {
    target: 'react-native',
    dir: 'local-cli/server/middleware',
    file: 'getDevToolsMiddleware.js',
    keyFunc: 'launchChromeDevTools',
    func: "function launchChromeDevTools(host, args = '') {",
    replaceFunc: "function launchChromeDevTools(host, args = '', skipRNDebugger) {",
    funcCall: '(host, args, true)',
    args: "'localhost&port=' + (host && host.split(':')[1] || '8081') + '&args=' + args"
  },
  '0.59.0-rc.0': [{
    target: '@react-native-community/cli',
    dir: 'build/commands/server/middleware',
    file: 'getDevToolsMiddleware.js',
    keyFunc: 'launchChromeDevTools',
    func: "function launchChromeDevTools(port, args = '') {",
    replaceFunc: "function launchChromeDevTools(port, args = '', skipRNDebugger) {",
    funcCall: '(port, args, true)',
    args: "'localhost&port=' + port + '&args=' + args"
  }, {
    target: '@react-native-community/cli', // 3.0.0 alpha
    dir: 'build/commands/server/middleware',
    file: 'getDevToolsMiddleware.js',
    keyFunc: 'launchDevTools',
    func: 'function launchDevTools({\n  port,\n  watchFolders\n}, isDebuggerConnected) {',
    replaceFunc: 'function launchDevTools({port, watchFolders},' + ' isDebuggerConnected, skipRNDebugger) {',
    funcCall: '({port, watchFolders}, isDebuggerConnected, true)',
    args: "'localhost&port=' + port + '&watchFolders=' + " + 'watchFolders.map(f => `"${f}"`).join(\',\')'
  }, {
    target: '@react-native-community/cli', // 3.0.0
    dir: 'build/commands/server/middleware',
    file: 'getDevToolsMiddleware.js',
    keyFunc: 'launchDefaultDebugger',
    func: "function launchDefaultDebugger(host, port, args = '') {",
    replaceFunc: "function launchDefaultDebugger(host, port, args = '', skipRNDebugger) {",
    funcCall: '(host, port, args, true)',
    args: "host + '&port=' + port + '&args=' + args"
  }]
};

var flags = {
  'react-native': rnFlags,
  'react-native-tvos': rnFlags,
  'react-native-macos': {
    '0.0.0': {
      target: 'react-native-macos',
      dir: 'local-cli/server/middleware',
      file: 'getDevToolsMiddleware.js',
      keyFunc: 'launchChromeDevTools',
      func: 'function launchChromeDevTools(port) {',
      replaceFunc: 'function launchChromeDevTools(port, skipRNDebugger) {',
      funcCall: '(port, true)',
      args: "'localhost&port=' + port"
    }
  },
  // react-native
  default: {
    target: 'react-native',
    dir: 'local-cli/server/middleware',
    file: 'getDevToolsMiddleware.js',
    keyFunc: 'launchChromeDevTools',
    func: 'function launchChromeDevTools(port) {',
    replaceFunc: 'function launchChromeDevTools(port, skipRNDebugger) {',
    funcCall: '(port, true)',
    args: "'localhost&port=' + port"
  }
};

var getModuleInfo = function getModuleInfo(modulePath, moduleName) {
  var pkg = JSON.parse(_fs2.default.readFileSync((0, _path.join)(modulePath, moduleName, 'package.json'))); // eslint-disable-line
  return { version: pkg.version, name: pkg.name };
};

function getFlag(moduleName, version) {
  var list = flags[moduleName || 'react-native'] || {};
  var versions = Object.keys(list);
  var flag = flags.default;
  for (var i = 0; i < versions.length; i++) {
    if (_semver2.default.gte(version, versions[i])) {
      flag = list[versions[i]];
    }
  }
  return flag;
}

var injectCode = function injectCode(modulePath, _ref) {
  var keyFunc = _ref.keyFunc,
      funcFlag = _ref.func,
      replaceFuncFlag = _ref.replaceFunc,
      funcCall = _ref.funcCall,
      args = _ref.args,
      target = _ref.target,
      dir = _ref.dir,
      file = _ref.file;

  var filePath = (0, _path.join)(modulePath, target, dir, file);
  if (!_fs2.default.existsSync(filePath)) return false;
  var code = (0, _es6Template2.default)(template, {
    startFlag,
    replaceFuncFlag,
    keyFunc,
    funcCall,
    endFlag,
    args
  });

  var middlewareCode = _fs2.default.readFileSync(filePath, 'utf-8');
  var start = middlewareCode.indexOf(startFlag);
  var end = middlewareCode.indexOf(endFlag) + endFlag.length;
  // already injected
  if (start > -1 && middlewareCode.indexOf(replaceFuncFlag) === -1) {
    start = -1;
    end = -1;
  }
  if (start === -1) {
    start = middlewareCode.indexOf(funcFlag);
    end = start + funcFlag.length;
  }
  if (start === -1) return false;
  _fs2.default.writeFileSync(filePath, middlewareCode.substr(0, start) + code + middlewareCode.substr(end, middlewareCode.length));
  return true;
};

var inject = exports.inject = function inject(modulePath, moduleName) {
  var info = getModuleInfo(modulePath, moduleName);
  var flagList = getFlag(info.name, info.version);
  if (Array.isArray(flagList)) {
    flagList.some(function (flag) {
      return injectCode(modulePath, flag);
    });
  } else {
    injectCode(modulePath, flagList);
  }
  return true;
};

var revertCode = function revertCode(modulePath, _ref2) {
  var funcFlag = _ref2.func,
      replaceFuncFlag = _ref2.replaceFunc,
      target = _ref2.target,
      dir = _ref2.dir,
      file = _ref2.file;

  var filePath = (0, _path.join)(modulePath, target, dir, file);
  if (!_fs2.default.existsSync(filePath)) return false;

  var middlewareCode = _fs2.default.readFileSync(filePath, 'utf-8');
  var start = middlewareCode.indexOf(startFlag);
  var end = middlewareCode.indexOf(endFlag) + endFlag.length;
  // already injected
  if (start > -1 && middlewareCode.indexOf(replaceFuncFlag) === -1) {
    start = -1;
    end = -1;
  }
  if (start === -1) return false;
  _fs2.default.writeFileSync(filePath, middlewareCode.substr(0, start) + funcFlag + middlewareCode.substr(end, middlewareCode.length));
  return true;
};

var revert = exports.revert = function revert(modulePath, moduleName) {
  var info = getModuleInfo(modulePath, moduleName);
  var flagList = getFlag(info.name, info.version);
  if (Array.isArray(flagList)) {
    flagList.some(function (flag) {
      return revertCode(modulePath, flag);
    });
  } else {
    revertCode(modulePath, flagList);
  }
  return true;
};